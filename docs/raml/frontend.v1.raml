#%RAML 1.0
title: Mercury
version: 0.0.1
protocols: [HTTPS]
# baseUri: /api
documentation:
  - title: Overview
    content: |
      The frontend mercury HTTP API allows us to query the inventory datatbase, inject RPC tasks, view task status,
      and retrieve RPC outputs

/inventory/computers:
  description: |
    Gets the current inventory with support for pagenation and custom projections
  get:
    responses:
      200:
        body:
          application/json:
            type: !include inventory_items.json
            example:
              {
                "limit": 5,
                "total": 104,
                "direction": "ASCENDING",
                "items": [
                    {
                        "_id": "56eae51c5742ee76aa83677f",
                        "mercury_id": "001183c41825ed761ceddab91e8fdb2a88d4943006"
                    },
                    {
                        "_id": "56eb6df75742ee76aa836780",
                        "mercury_id": "018baf9b8936161a5a954e470afcb781298d2448d9"
                    },
                    {
                        "_id": "56f039d15742ee76aa836781",
                        "mercury_id": "0137c992d1988be7b154a7633d3514a59718ca5104"
                    },
                    {
                        "_id": "56f04b0a5742ee76aa836782",
                        "mercury_id": "019ffb80cddf6a99aa4e401dc2ab5d749fae13b3ec"
                    },
                    {
                        "_id": "56f066cb5742ee76aa836783",
                        "mercury_id": "00be1514caff0518640530e749d4da5f1049ec5221"
                    }
                ]
              }
    queryParameters:
      limit:
        required: false
        type: integer
        description: Maximum number of elements to return
        default: 250
      offset_id:
        required: false
        type: string
        description: ObjectID to act as the offset (for pagenation)
        example: 56f04b0a5742ee76aa836782
      sort_direction:
        description: ASCENDING or DESCENDING (by objectID)
        required: false
        type: string
        example: ASCENDING
        default: ASCENDING
      projection:
        required: false
        description: Which fields to return or omit
        default: mercury_id,_id
        example: |
          cpu.frequency.max,raid.total_drives
          interfaces.lldp.switch_name


/inventory/computers/{mercury_id}:
  description: Gets a single inventory object by mercury_id
  get:
    queryParameters:
      projection:
        required: false
        description: Which fields to return or omit
        default: null
        example: |
          raid,os_storage
          interfaces.lldp.switch_name
    responses:
      404:
      200:
        body:
          application/json:
            example: !include inventory_computer_example.json

/inventory/computers/query:
  description: |
    Post queries to the inventory database controller using MongoDB query syntax
  post:
    queryParameters:
      limit:
        required: false
        type: integer
        description: Maximum number of elements to return
        default: 250
      offset_id:
        required: false
        type: string
        description: ObjectID to act as the offset (for pagenation)
        example: 56f04b0a5742ee76aa836782
      sort_direction:
        description: ASCENDING or DESCENDING (by objectID)
        required: false
        type: string
        example: ASCENDING
        default: ASCENDING
      projection:
        required: false
        description: Which fields to return or omit
        default: mercury_id=1,_id=1
        example: |
          cpu.frequency.max=1,raid.total_drives=1
          interfaces.lldp.switch_name=1
    body:
      application/json:
        type: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "title": "Query Payload",
            "description": "An object containing a query property",
            "properties": {
              "query": {
                "description": "A MongoDB query. For more information on the syntax: https://docs.mongodb.com/manual/reference/method/db.collection.find/",
                "type": "object"
              }
            },
            "required": ["query"]
          }
        example:
          {
            "query": {
              "raid.total_drives": {"gt": 20},
              "dmi.sys_vendor": "HP"
            }
          }
    responses:
      400:
        description: Returned when encountering parsing errors or and invalid MongDB Query
      200:
        description: The response of the example request using a custom projection (raid.name,raid.total_drives)
        body:
          application/json:
            type: !include inventory_items.json
            example: !include query_response_example.json


/active/computers:
  description: |
    Get only computers with an active ZeroMQ agent.
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                    "limit": 1,
                    "total": 1,
                    "direction": "ASCENDING",
                    "items": [
                        {
                          "_id": "56eae51c5742ee76aa83677f",
                          "mercury_id": "001183c41825ed761ceddab91e8fdb2a88d4943006"
                          "agent_info": {

                            "rpc_address": "10.127.29.196",
                            "_id": "594ff6015742ee10472bd804",
                            "rpc_port": 9003,
                            "localtime": 1498412631.401529,
                            "rpc_address6": null,
                            "time_created": 1498412545.7970352,
                            "ping_port": 9004,
                          },
                          "backend": {
                            "name": "be1-dev1.kickstart.rackspace.com",
                            "datacenter": "dev1",
                            "address": "10.127.29.99",
                            "address_v6": null,
                            "frontend_port": 9001,
                            "backend_port": 9002
                      },
                  ]
              }

    queryParameters:
      limit:
        required: false
        type: integer
        description: Maximum number of elements to return
        default: 250
      offset_id:
        required: false
        type: string
        description: ObjectID to act as the offset (for pagenation)
        example: 56f04b0a5742ee76aa836782
      sort_direction:
        description: ASCENDING or DESCENDING (by objectID)
        required: false
        type: string
        example: ASCENDING
        default: ASCENDING

/active/computers/{mercury_id}:
  description: Get one active computer
  get:
    responses:
      404:
      202:
        body:
          application/json:

            example: !include active_computer_example.json

/active/computers/query:
  description: "Query for active computers"
  post:
    body:
      application/json:
        type: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "title": "Query Payload",
            "description": "An object containing a query property",
            "properties": {
              "query": {
                "description": "A MongoDB query. For more information on the syntax: https://docs.mongodb.com/manual/reference/method/db.collection.find/",
                "type": "object"
              }
            },
            "required": ["query"]
          }
        example:
          {"query": {"dmi.sys_vendor": "HP"}} # query only HP devices
    responses:
      400:
        description: Returned for JSON parsing errors
      200:
        body:
          application/json:
            example: |
              {
                    "limit": 1,
                    "total": 1,
                    "direction": "ASCENDING",
                    "items": [
                        {
                          "_id": "56eae51c5742ee76aa83677f",
                          "mercury_id": "001183c41825ed761ceddab91e8fdb2a88d4943006"
                          "agent_info": {

                            "rpc_address": "10.127.29.196",
                            "_id": "594ff6015742ee10472bd804",
                            "rpc_port": 9003,
                            "localtime": 1498412631.401529,
                            "rpc_address6": null,
                            "time_created": 1498412545.7970352,
                            "ping_port": 9004,
                          },
                          "backend": {
                            "name": "be1-dev1.kickstart.rackspace.com",
                            "datacenter": "dev1",
                            "address": "10.127.29.99",
                            "address_v6": null,
                            "frontend_port": 9001,
                            "backend_port": 9002
                      },
                  ]
              }

/rpc/jobs:
  description: Query and inject new RPC jobs
  get:
    description: Get current jobs
    body:
      application/json:
        type: !include rpc_jobs_get_schema.json
        example:
          {
            "count": 1,
            "jobs": [
              {
                    "_id": "59528f205742ee10465d89d7",
                    "task_count": 1,
                    "time_started": 1498582816.7795022,
                    "ttl_time_completed": "Tue Jun 27 17:00:16 2017",
                    "time_completed": 1498582816.8045027,
                    "job_id": "bd07bffa-5bae-438a-9864-fa39034040d4"
              }
            ]
          }
  post:
    description: Posting jobs requires a query and an instruction
    body:
      application/json:
        type: !include rpc_jobs_post_schema.json
        example:
          {
            "query": {
              "interfaces.lldp.switch_name": "j6-23-1S.ord1"
            },
            "instruction": {
              "method": "echo",
              "args": ["Hello World!"]
            }
          }
    responses:
      400:
        description: Returned when encountering parsing errors or and invalid MongDB Query
      200:
        body:
          application/json:
            type: |
              {
                "type": "object",
                "title": "Job inject success",
                "properties": {
                  "job_id": {"type": "string"}
                }
              }
            example:
              {
                "job_id": "2ff2363b-c693-472c-af70-7f1c11da20c0"
              }

/rpc/jobs/{job_id}:
  description: Get a current job
  get:
    responses:
      404:
      200:
        body:
          application/json:
            example: |
              {
                "job": {
                    "_id": "59528f205742ee10465d89d7",
                    "task_count": 1,
                    "time_started": 1498582816.7795022,
                    "ttl_time_completed": "Tue Jun 27 17:00:16 2017",
                    "time_completed": 1498582816.8045027,
                    "job_id": "bd07bffa-5bae-438a-9864-fa39034040d4",
                    "instruction": {
                        "args": [
                            "Hello World!"
                        ],
                        "method": "echo"
                    }
                  }
                }
              }
/rpc/jobs/{job_id}/status:
  description: Get the status for a job
  get:
    responses:
      404:
      200:
        body:
          application/json:
            example: |
              {
                "job": {
                    "has_failures": false,
                    "tasks": [
                        {
                            "status": "SUCCESS",
                            "task_id": "9e112f88-57a5-4936-8618-69c998f6e703"
                        }
                    ],
                    "_id": "59528f205742ee10465d89d7",
                    "task_count": 1,
                    "time_started": 1498582816.7795022,
                    "ttl_time_completed": "Tue Jun 27 17:00:16 2017",
                    "time_completed": 1498582816.8045027,
                    "job_id": "bd07bffa-5bae-438a-9864-fa39034040d4",
                    "instruction": {
                        "args": [
                            "Hello World!"
                        ],
                        "method": "echo"
                    }
                  }
              }

/rpc/jobs/{job_id}/tasks:
  description: Get all tasks for a given Job, including task output
  get:
    responses:
      404:
      200:
        body:
          application/json:
            example: |
              {
                "count": 1,
                "tasks": [
                    {
                      "progress": 0,
                      "action": "Completed",
                      "time_updated": 1498582816.8046803,
                      "port": 9003,
                      "traceback": null,
                      "args": [
                          "Hello World!"
                      ],
                      "ttl_time_completed": "Tue Jun 27 17:00:16 2017",
                      "time_completed": 1498582914.779134,
                      "host": "10.127.29.196",
                      "message": "Hello World!",
                      "task_id": "9e112f88-57a5-4936-8618-69c998f6e703",
                      "kwargs": { },
                      "_id": "59528f205742ee10465d89d8",
                      "mercury_id": "0110a1628669e487f48b3f8de13bebeafe2933c875",
                      "method": "echo",
                      "time_started": 1498582914.776404,
                      "timeout": 0,
                      "status": "SUCCESS",
                      "job_id": "bd07bffa-5bae-438a-9864-fa39034040d4"
                    }
                  ]
                }
/rpc/task/{task_id}:
  description: Get a task
  get:
    responses:
      404:
      200:
        body:
          application/json:
            example: |
              {
                "task": {
                  "progress": 0,
                  "action": "Completed",
                  "time_updated": 1498582816.8046803,
                  "port": 9003,
                  "traceback": null,
                  "args": [
                      "Hello World!"
                  ],
                  "ttl_time_completed": "Tue Jun 27 17:00:16 2017",
                  "time_completed": 1498582914.779134,
                  "host": "10.127.29.196",
                  "message": "Hello World!",
                  "task_id": "9e112f88-57a5-4936-8618-69c998f6e703",
                  "kwargs": { },
                  "_id": "59528f205742ee10465d89d8",
                  "mercury_id": "0110a1628669e487f48b3f8de13bebeafe2933c875",
                  "method": "echo",
                  "time_started": 1498582914.776404,
                  "timeout": 0,
                  "status": "SUCCESS",
                  "job_id": "bd07bffa-5bae-438a-9864-fa39034040d4"
                }
              }